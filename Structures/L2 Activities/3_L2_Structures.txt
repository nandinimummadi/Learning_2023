3. Implement structures to read, write and compute average- marks and the students scoring above
   and below the average marks for a class of N students.

#include <stdio.h>
#include <stdlib.h>

// Structure definition for a student
struct Student {
    char name[50];
    float marks;
};

// Function to read data for N students
void readData(struct Student* students, int n) {
    int i;

    for (i = 0; i < n; i++) {
        printf("\nEnter details for student %d:\n", i + 1);

        printf("Enter name: ");
        scanf("%s", students[i].name);

        printf("Enter marks: ");
        scanf("%f", &students[i].marks);
    }
}

// Function to write data for N students
void writeData(const struct Student* students, int n) {
    int i;

    printf("\nStudent data:\n");
    for (i = 0; i < n; i++) {
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
    }
}

// Function to compute the average marks for N students
float computeAverage(const struct Student* students, int n) {
    int i;
    float sum = 0.0;

    for (i = 0; i < n; i++) {
        sum += students[i].marks;
    }

    return sum / n;
}

// Function to find students scoring above and below the average marks
void findStudents(const struct Student* students, int n, float average) {
    int i;
    printf("\nStudents scoring above average marks:\n");
    for (i = 0; i < n; i++) {
        if (students[i].marks > average) {
            printf("Name: %s\n", students[i].name);
            printf("Marks: %.2f\n", students[i].marks);
        }
    }

    printf("\nStudents scoring below average marks:\n");
    for (i = 0; i < n; i++) {
        if (students[i].marks < average) {
            printf("Name: %s\n", students[i].name);
            printf("Marks: %.2f\n", students[i].marks);
        }
    }
}

int main() {
    int n;
    float average;
    struct Student* students;

    printf("Enter the number of students: ");
    scanf("%d", &n);

    // Dynamically allocate memory for n student structures
    students = (struct Student*)malloc(n * sizeof(struct Student));

    // Read data for each student
    readData(students, n);

    // Write data for each student
    writeData(students, n);

    // Compute the average marks
    average = computeAverage(students, n);
    printf("\nAverage marks: %.2f\n", average);

    // Find students scoring above and below average marks
    findStudents(students, n, average);

    // Free the dynamically allocated memory
    free(students);

    return 0;
}
